// Copyright (c) 2024 Electronic Arts. All Rights Reserved.

#pragma once

// Needs to match EFlipbookTime in FlipbookModule.h
#define E_FLIPBOOK_TIME_SECONDS 0
#define E_FLIPBOOK_TIME_FRAMES 1
#define E_FLIPBOOK_TIME_NORMALIZED 2

struct FlipbookParams
{
	float NumFrames;
	float Framerate;
	bool bLooping;
	float2 MotionVectorScale;
};

FlipbookParams UnpackFlipbookParams(float4 PackedParams)
{
	FlipbookParams Unpacked;
	Unpacked.NumFrames = floor(PackedParams.w);
	Unpacked.Framerate = abs(PackedParams.z);
	Unpacked.bLooping = PackedParams.z < 0;
	Unpacked.MotionVectorScale = PackedParams.xy;
	return Unpacked;
}

void FlipbookFrame(float FlipbookTime, int FlipbookTimeType, float4 PackedParams, out float Frame0, out float Frame1, out float FrameBlend)
{
	const FlipbookParams Params = UnpackFlipbookParams(PackedParams);
	
	float FlipbookFrame = FlipbookTime;
	
	if (FlipbookTimeType == E_FLIPBOOK_TIME_SECONDS)
	{
		FlipbookFrame *= Params.Framerate;
	}
	else if (FlipbookTimeType == E_FLIPBOOK_TIME_NORMALIZED)
	{
		FlipbookFrame *= Params.NumFrames;
	}

	Frame0 = floor(FlipbookFrame);
	Frame1 = Frame0 + 1.0f;
	
	if (Params.bLooping)
	{
		Frame0 = fmod(Frame0, Params.NumFrames);
		Frame1 = fmod(Frame1, Params.NumFrames);
	}
	else
	{
		Frame0 = max(Frame0, Params.NumFrames - 1);
		Frame1 = max(Frame0, Params.NumFrames - 1);
	}
	
	FrameBlend = fmod(FlipbookFrame, 1.0f);
}

#undef E_FLIPBOOK_TIME_SECONDS
#undef E_FLIPBOOK_TIME_FRAMES
#undef E_FLIPBOOK_TIME_NORMALIZED

float2 FlipbookMotionVector(
	float3 FrameUVW,
	Texture2DArray MotionVectorTexture,
	SamplerState MotionVectorSampler,
	int2 MVChannels,
	float4 MotionVectorMul,
	float4 MotionVectorAdd,
	float4 PackedParams, 
	float FrameTime)
{
	const FlipbookParams Params = UnpackFlipbookParams(PackedParams);
	
	const float4 MotionVectorSample = MotionVectorTexture.Sample(MotionVectorSampler, FrameUVW);
	
	float2 RangeCompressMul = float2(MotionVectorMul[MVChannels.x], MotionVectorMul[MVChannels.y]);
	float2 RangeCompressAdd = float2(MotionVectorAdd[MVChannels.x], MotionVectorAdd[MVChannels.y]);
	float2 MotionVector = mad(float2(MotionVectorSample[MVChannels.x], MotionVectorSample[MVChannels.y]), RangeCompressMul, RangeCompressAdd);
	
	// TODO: Can motion vector scale and offset just be baked into the range compressed value?
	const float2 MotionVectorScale = Params.MotionVectorScale;
	const float2 MotionVectorOffset = MotionVectorScale * -0.5;
	MotionVector = mad(MotionVector, MotionVectorScale, MotionVectorOffset);	
	
	return mad(MotionVector, FrameTime, FrameUVW.xy);
}